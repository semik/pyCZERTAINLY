# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import List
from typing_extensions import Annotated
from openapi_client.models.base_attribute_dto import BaseAttributeDto
from openapi_client.models.cipher_data_request_dto import CipherDataRequestDto
from openapi_client.models.decrypt_data_response_dto import DecryptDataResponseDto
from openapi_client.models.encrypt_data_response_dto import EncryptDataResponseDto
from openapi_client.models.key_algorithm import KeyAlgorithm
from openapi_client.models.random_data_request_dto import RandomDataRequestDto
from openapi_client.models.random_data_response_dto import RandomDataResponseDto
from openapi_client.models.sign_data_request_dto import SignDataRequestDto
from openapi_client.models.sign_data_response_dto import SignDataResponseDto
from openapi_client.models.verify_data_request_dto import VerifyDataRequestDto
from openapi_client.models.verify_data_response_dto import VerifyDataResponseDto

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class CryptographicOperationsControllerApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def decrypt_data(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        token_profile_uuid: Annotated[StrictStr, Field(description="Token Profile UUID")],
        uuid: Annotated[StrictStr, Field(description="Key UUID")],
        key_item_uuid: Annotated[StrictStr, Field(description="Key Item UUID")],
        cipher_data_request_dto: CipherDataRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DecryptDataResponseDto:
        """Decrypt data using a Key


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param token_profile_uuid: Token Profile UUID (required)
        :type token_profile_uuid: str
        :param uuid: Key UUID (required)
        :type uuid: str
        :param key_item_uuid: Key Item UUID (required)
        :type key_item_uuid: str
        :param cipher_data_request_dto: (required)
        :type cipher_data_request_dto: CipherDataRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._decrypt_data_serialize(
            token_instance_uuid=token_instance_uuid,
            token_profile_uuid=token_profile_uuid,
            uuid=uuid,
            key_item_uuid=key_item_uuid,
            cipher_data_request_dto=cipher_data_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '422': "List[str]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
            '200': "DecryptDataResponseDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def decrypt_data_with_http_info(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        token_profile_uuid: Annotated[StrictStr, Field(description="Token Profile UUID")],
        uuid: Annotated[StrictStr, Field(description="Key UUID")],
        key_item_uuid: Annotated[StrictStr, Field(description="Key Item UUID")],
        cipher_data_request_dto: CipherDataRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DecryptDataResponseDto]:
        """Decrypt data using a Key


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param token_profile_uuid: Token Profile UUID (required)
        :type token_profile_uuid: str
        :param uuid: Key UUID (required)
        :type uuid: str
        :param key_item_uuid: Key Item UUID (required)
        :type key_item_uuid: str
        :param cipher_data_request_dto: (required)
        :type cipher_data_request_dto: CipherDataRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._decrypt_data_serialize(
            token_instance_uuid=token_instance_uuid,
            token_profile_uuid=token_profile_uuid,
            uuid=uuid,
            key_item_uuid=key_item_uuid,
            cipher_data_request_dto=cipher_data_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '422': "List[str]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
            '200': "DecryptDataResponseDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def decrypt_data_without_preload_content(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        token_profile_uuid: Annotated[StrictStr, Field(description="Token Profile UUID")],
        uuid: Annotated[StrictStr, Field(description="Key UUID")],
        key_item_uuid: Annotated[StrictStr, Field(description="Key Item UUID")],
        cipher_data_request_dto: CipherDataRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Decrypt data using a Key


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param token_profile_uuid: Token Profile UUID (required)
        :type token_profile_uuid: str
        :param uuid: Key UUID (required)
        :type uuid: str
        :param key_item_uuid: Key Item UUID (required)
        :type key_item_uuid: str
        :param cipher_data_request_dto: (required)
        :type cipher_data_request_dto: CipherDataRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._decrypt_data_serialize(
            token_instance_uuid=token_instance_uuid,
            token_profile_uuid=token_profile_uuid,
            uuid=uuid,
            key_item_uuid=key_item_uuid,
            cipher_data_request_dto=cipher_data_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '422': "List[str]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
            '200': "DecryptDataResponseDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _decrypt_data_serialize(
        self,
        token_instance_uuid,
        token_profile_uuid,
        uuid,
        key_item_uuid,
        cipher_data_request_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if token_instance_uuid is not None:
            _path_params['tokenInstanceUuid'] = token_instance_uuid
        if token_profile_uuid is not None:
            _path_params['tokenProfileUuid'] = token_profile_uuid
        if uuid is not None:
            _path_params['uuid'] = uuid
        if key_item_uuid is not None:
            _path_params['keyItemUuid'] = key_item_uuid
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if cipher_data_request_dto is not None:
            _body_params = cipher_data_request_dto


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/decrypt',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def encrypt_data(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        token_profile_uuid: Annotated[StrictStr, Field(description="Token Profile UUID")],
        uuid: Annotated[StrictStr, Field(description="Key UUID")],
        key_item_uuid: Annotated[StrictStr, Field(description="Key Item UUID")],
        cipher_data_request_dto: CipherDataRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EncryptDataResponseDto:
        """Encrypt data using a Key


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param token_profile_uuid: Token Profile UUID (required)
        :type token_profile_uuid: str
        :param uuid: Key UUID (required)
        :type uuid: str
        :param key_item_uuid: Key Item UUID (required)
        :type key_item_uuid: str
        :param cipher_data_request_dto: (required)
        :type cipher_data_request_dto: CipherDataRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._encrypt_data_serialize(
            token_instance_uuid=token_instance_uuid,
            token_profile_uuid=token_profile_uuid,
            uuid=uuid,
            key_item_uuid=key_item_uuid,
            cipher_data_request_dto=cipher_data_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '422': "List[str]",
            '401': None,
            '400': "ErrorMessageDto",
            '200': "EncryptDataResponseDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def encrypt_data_with_http_info(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        token_profile_uuid: Annotated[StrictStr, Field(description="Token Profile UUID")],
        uuid: Annotated[StrictStr, Field(description="Key UUID")],
        key_item_uuid: Annotated[StrictStr, Field(description="Key Item UUID")],
        cipher_data_request_dto: CipherDataRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EncryptDataResponseDto]:
        """Encrypt data using a Key


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param token_profile_uuid: Token Profile UUID (required)
        :type token_profile_uuid: str
        :param uuid: Key UUID (required)
        :type uuid: str
        :param key_item_uuid: Key Item UUID (required)
        :type key_item_uuid: str
        :param cipher_data_request_dto: (required)
        :type cipher_data_request_dto: CipherDataRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._encrypt_data_serialize(
            token_instance_uuid=token_instance_uuid,
            token_profile_uuid=token_profile_uuid,
            uuid=uuid,
            key_item_uuid=key_item_uuid,
            cipher_data_request_dto=cipher_data_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '422': "List[str]",
            '401': None,
            '400': "ErrorMessageDto",
            '200': "EncryptDataResponseDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def encrypt_data_without_preload_content(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        token_profile_uuid: Annotated[StrictStr, Field(description="Token Profile UUID")],
        uuid: Annotated[StrictStr, Field(description="Key UUID")],
        key_item_uuid: Annotated[StrictStr, Field(description="Key Item UUID")],
        cipher_data_request_dto: CipherDataRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Encrypt data using a Key


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param token_profile_uuid: Token Profile UUID (required)
        :type token_profile_uuid: str
        :param uuid: Key UUID (required)
        :type uuid: str
        :param key_item_uuid: Key Item UUID (required)
        :type key_item_uuid: str
        :param cipher_data_request_dto: (required)
        :type cipher_data_request_dto: CipherDataRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._encrypt_data_serialize(
            token_instance_uuid=token_instance_uuid,
            token_profile_uuid=token_profile_uuid,
            uuid=uuid,
            key_item_uuid=key_item_uuid,
            cipher_data_request_dto=cipher_data_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '422': "List[str]",
            '401': None,
            '400': "ErrorMessageDto",
            '200': "EncryptDataResponseDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _encrypt_data_serialize(
        self,
        token_instance_uuid,
        token_profile_uuid,
        uuid,
        key_item_uuid,
        cipher_data_request_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if token_instance_uuid is not None:
            _path_params['tokenInstanceUuid'] = token_instance_uuid
        if token_profile_uuid is not None:
            _path_params['tokenProfileUuid'] = token_profile_uuid
        if uuid is not None:
            _path_params['uuid'] = uuid
        if key_item_uuid is not None:
            _path_params['keyItemUuid'] = key_item_uuid
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if cipher_data_request_dto is not None:
            _body_params = cipher_data_request_dto


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/encrypt',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_cipher_attributes(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        token_profile_uuid: Annotated[StrictStr, Field(description="Token Profile UUID")],
        uuid: Annotated[StrictStr, Field(description="Key UUID")],
        key_item_uuid: Annotated[StrictStr, Field(description="Key Item UUID")],
        algorithm: Annotated[KeyAlgorithm, Field(description="Cryptographic algorithm")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[BaseAttributeDto]:
        """List of cipher Attributes


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param token_profile_uuid: Token Profile UUID (required)
        :type token_profile_uuid: str
        :param uuid: Key UUID (required)
        :type uuid: str
        :param key_item_uuid: Key Item UUID (required)
        :type key_item_uuid: str
        :param algorithm: Cryptographic algorithm (required)
        :type algorithm: KeyAlgorithm
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_cipher_attributes_serialize(
            token_instance_uuid=token_instance_uuid,
            token_profile_uuid=token_profile_uuid,
            uuid=uuid,
            key_item_uuid=key_item_uuid,
            algorithm=algorithm,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BaseAttributeDto]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_cipher_attributes_with_http_info(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        token_profile_uuid: Annotated[StrictStr, Field(description="Token Profile UUID")],
        uuid: Annotated[StrictStr, Field(description="Key UUID")],
        key_item_uuid: Annotated[StrictStr, Field(description="Key Item UUID")],
        algorithm: Annotated[KeyAlgorithm, Field(description="Cryptographic algorithm")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[BaseAttributeDto]]:
        """List of cipher Attributes


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param token_profile_uuid: Token Profile UUID (required)
        :type token_profile_uuid: str
        :param uuid: Key UUID (required)
        :type uuid: str
        :param key_item_uuid: Key Item UUID (required)
        :type key_item_uuid: str
        :param algorithm: Cryptographic algorithm (required)
        :type algorithm: KeyAlgorithm
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_cipher_attributes_serialize(
            token_instance_uuid=token_instance_uuid,
            token_profile_uuid=token_profile_uuid,
            uuid=uuid,
            key_item_uuid=key_item_uuid,
            algorithm=algorithm,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BaseAttributeDto]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_cipher_attributes_without_preload_content(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        token_profile_uuid: Annotated[StrictStr, Field(description="Token Profile UUID")],
        uuid: Annotated[StrictStr, Field(description="Key UUID")],
        key_item_uuid: Annotated[StrictStr, Field(description="Key Item UUID")],
        algorithm: Annotated[KeyAlgorithm, Field(description="Cryptographic algorithm")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List of cipher Attributes


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param token_profile_uuid: Token Profile UUID (required)
        :type token_profile_uuid: str
        :param uuid: Key UUID (required)
        :type uuid: str
        :param key_item_uuid: Key Item UUID (required)
        :type key_item_uuid: str
        :param algorithm: Cryptographic algorithm (required)
        :type algorithm: KeyAlgorithm
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_cipher_attributes_serialize(
            token_instance_uuid=token_instance_uuid,
            token_profile_uuid=token_profile_uuid,
            uuid=uuid,
            key_item_uuid=key_item_uuid,
            algorithm=algorithm,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BaseAttributeDto]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_cipher_attributes_serialize(
        self,
        token_instance_uuid,
        token_profile_uuid,
        uuid,
        key_item_uuid,
        algorithm,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if token_instance_uuid is not None:
            _path_params['tokenInstanceUuid'] = token_instance_uuid
        if token_profile_uuid is not None:
            _path_params['tokenProfileUuid'] = token_profile_uuid
        if uuid is not None:
            _path_params['uuid'] = uuid
        if key_item_uuid is not None:
            _path_params['keyItemUuid'] = key_item_uuid
        if algorithm is not None:
            _path_params['algorithm'] = algorithm.value
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/cipher/{algorithm}/attributes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_random_attributes(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[BaseAttributeDto]:
        """List of random generator Attributes


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_random_attributes_serialize(
            token_instance_uuid=token_instance_uuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BaseAttributeDto]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_random_attributes_with_http_info(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[BaseAttributeDto]]:
        """List of random generator Attributes


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_random_attributes_serialize(
            token_instance_uuid=token_instance_uuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BaseAttributeDto]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_random_attributes_without_preload_content(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List of random generator Attributes


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_random_attributes_serialize(
            token_instance_uuid=token_instance_uuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BaseAttributeDto]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_random_attributes_serialize(
        self,
        token_instance_uuid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if token_instance_uuid is not None:
            _path_params['tokenInstanceUuid'] = token_instance_uuid
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/operations/tokens/{tokenInstanceUuid}/random/attributes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_signature_attributes(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        token_profile_uuid: Annotated[StrictStr, Field(description="Token Profile UUID")],
        uuid: Annotated[StrictStr, Field(description="Key instance UUID")],
        key_item_uuid: Annotated[StrictStr, Field(description="Key Item UUID")],
        algorithm: Annotated[KeyAlgorithm, Field(description="Cryptographic algorithm")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[BaseAttributeDto]:
        """List of signature Attributes


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param token_profile_uuid: Token Profile UUID (required)
        :type token_profile_uuid: str
        :param uuid: Key instance UUID (required)
        :type uuid: str
        :param key_item_uuid: Key Item UUID (required)
        :type key_item_uuid: str
        :param algorithm: Cryptographic algorithm (required)
        :type algorithm: KeyAlgorithm
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_signature_attributes_serialize(
            token_instance_uuid=token_instance_uuid,
            token_profile_uuid=token_profile_uuid,
            uuid=uuid,
            key_item_uuid=key_item_uuid,
            algorithm=algorithm,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BaseAttributeDto]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_signature_attributes_with_http_info(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        token_profile_uuid: Annotated[StrictStr, Field(description="Token Profile UUID")],
        uuid: Annotated[StrictStr, Field(description="Key instance UUID")],
        key_item_uuid: Annotated[StrictStr, Field(description="Key Item UUID")],
        algorithm: Annotated[KeyAlgorithm, Field(description="Cryptographic algorithm")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[BaseAttributeDto]]:
        """List of signature Attributes


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param token_profile_uuid: Token Profile UUID (required)
        :type token_profile_uuid: str
        :param uuid: Key instance UUID (required)
        :type uuid: str
        :param key_item_uuid: Key Item UUID (required)
        :type key_item_uuid: str
        :param algorithm: Cryptographic algorithm (required)
        :type algorithm: KeyAlgorithm
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_signature_attributes_serialize(
            token_instance_uuid=token_instance_uuid,
            token_profile_uuid=token_profile_uuid,
            uuid=uuid,
            key_item_uuid=key_item_uuid,
            algorithm=algorithm,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BaseAttributeDto]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_signature_attributes_without_preload_content(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        token_profile_uuid: Annotated[StrictStr, Field(description="Token Profile UUID")],
        uuid: Annotated[StrictStr, Field(description="Key instance UUID")],
        key_item_uuid: Annotated[StrictStr, Field(description="Key Item UUID")],
        algorithm: Annotated[KeyAlgorithm, Field(description="Cryptographic algorithm")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List of signature Attributes


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param token_profile_uuid: Token Profile UUID (required)
        :type token_profile_uuid: str
        :param uuid: Key instance UUID (required)
        :type uuid: str
        :param key_item_uuid: Key Item UUID (required)
        :type key_item_uuid: str
        :param algorithm: Cryptographic algorithm (required)
        :type algorithm: KeyAlgorithm
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_signature_attributes_serialize(
            token_instance_uuid=token_instance_uuid,
            token_profile_uuid=token_profile_uuid,
            uuid=uuid,
            key_item_uuid=key_item_uuid,
            algorithm=algorithm,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BaseAttributeDto]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_signature_attributes_serialize(
        self,
        token_instance_uuid,
        token_profile_uuid,
        uuid,
        key_item_uuid,
        algorithm,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if token_instance_uuid is not None:
            _path_params['tokenInstanceUuid'] = token_instance_uuid
        if token_profile_uuid is not None:
            _path_params['tokenProfileUuid'] = token_profile_uuid
        if uuid is not None:
            _path_params['uuid'] = uuid
        if key_item_uuid is not None:
            _path_params['keyItemUuid'] = key_item_uuid
        if algorithm is not None:
            _path_params['algorithm'] = algorithm.value
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/signature/{algorithm}/attributes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def random_data(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        random_data_request_dto: RandomDataRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RandomDataResponseDto:
        """Generate random data


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param random_data_request_dto: (required)
        :type random_data_request_dto: RandomDataRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._random_data_serialize(
            token_instance_uuid=token_instance_uuid,
            random_data_request_dto=random_data_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '422': "List[str]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
            '200': "RandomDataResponseDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def random_data_with_http_info(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        random_data_request_dto: RandomDataRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RandomDataResponseDto]:
        """Generate random data


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param random_data_request_dto: (required)
        :type random_data_request_dto: RandomDataRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._random_data_serialize(
            token_instance_uuid=token_instance_uuid,
            random_data_request_dto=random_data_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '422': "List[str]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
            '200': "RandomDataResponseDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def random_data_without_preload_content(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        random_data_request_dto: RandomDataRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generate random data


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param random_data_request_dto: (required)
        :type random_data_request_dto: RandomDataRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._random_data_serialize(
            token_instance_uuid=token_instance_uuid,
            random_data_request_dto=random_data_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '422': "List[str]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
            '200': "RandomDataResponseDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _random_data_serialize(
        self,
        token_instance_uuid,
        random_data_request_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if token_instance_uuid is not None:
            _path_params['tokenInstanceUuid'] = token_instance_uuid
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if random_data_request_dto is not None:
            _body_params = random_data_request_dto


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/operations/tokens/{tokenInstanceUuid}/random',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sign_data(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        token_profile_uuid: Annotated[StrictStr, Field(description="Token Profile UUID")],
        uuid: Annotated[StrictStr, Field(description="Key UUID")],
        key_item_uuid: Annotated[StrictStr, Field(description="Key Item UUID")],
        sign_data_request_dto: SignDataRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SignDataResponseDto:
        """Sign data using a Key


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param token_profile_uuid: Token Profile UUID (required)
        :type token_profile_uuid: str
        :param uuid: Key UUID (required)
        :type uuid: str
        :param key_item_uuid: Key Item UUID (required)
        :type key_item_uuid: str
        :param sign_data_request_dto: (required)
        :type sign_data_request_dto: SignDataRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sign_data_serialize(
            token_instance_uuid=token_instance_uuid,
            token_profile_uuid=token_profile_uuid,
            uuid=uuid,
            key_item_uuid=key_item_uuid,
            sign_data_request_dto=sign_data_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SignDataResponseDto",
            '422': "List[str]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sign_data_with_http_info(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        token_profile_uuid: Annotated[StrictStr, Field(description="Token Profile UUID")],
        uuid: Annotated[StrictStr, Field(description="Key UUID")],
        key_item_uuid: Annotated[StrictStr, Field(description="Key Item UUID")],
        sign_data_request_dto: SignDataRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SignDataResponseDto]:
        """Sign data using a Key


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param token_profile_uuid: Token Profile UUID (required)
        :type token_profile_uuid: str
        :param uuid: Key UUID (required)
        :type uuid: str
        :param key_item_uuid: Key Item UUID (required)
        :type key_item_uuid: str
        :param sign_data_request_dto: (required)
        :type sign_data_request_dto: SignDataRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sign_data_serialize(
            token_instance_uuid=token_instance_uuid,
            token_profile_uuid=token_profile_uuid,
            uuid=uuid,
            key_item_uuid=key_item_uuid,
            sign_data_request_dto=sign_data_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SignDataResponseDto",
            '422': "List[str]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sign_data_without_preload_content(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        token_profile_uuid: Annotated[StrictStr, Field(description="Token Profile UUID")],
        uuid: Annotated[StrictStr, Field(description="Key UUID")],
        key_item_uuid: Annotated[StrictStr, Field(description="Key Item UUID")],
        sign_data_request_dto: SignDataRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Sign data using a Key


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param token_profile_uuid: Token Profile UUID (required)
        :type token_profile_uuid: str
        :param uuid: Key UUID (required)
        :type uuid: str
        :param key_item_uuid: Key Item UUID (required)
        :type key_item_uuid: str
        :param sign_data_request_dto: (required)
        :type sign_data_request_dto: SignDataRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sign_data_serialize(
            token_instance_uuid=token_instance_uuid,
            token_profile_uuid=token_profile_uuid,
            uuid=uuid,
            key_item_uuid=key_item_uuid,
            sign_data_request_dto=sign_data_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SignDataResponseDto",
            '422': "List[str]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sign_data_serialize(
        self,
        token_instance_uuid,
        token_profile_uuid,
        uuid,
        key_item_uuid,
        sign_data_request_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if token_instance_uuid is not None:
            _path_params['tokenInstanceUuid'] = token_instance_uuid
        if token_profile_uuid is not None:
            _path_params['tokenProfileUuid'] = token_profile_uuid
        if uuid is not None:
            _path_params['uuid'] = uuid
        if key_item_uuid is not None:
            _path_params['keyItemUuid'] = key_item_uuid
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if sign_data_request_dto is not None:
            _body_params = sign_data_request_dto


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/sign',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def verify_data(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        token_profile_uuid: Annotated[StrictStr, Field(description="Token Profile UUID")],
        uuid: Annotated[StrictStr, Field(description="Key UUID")],
        key_item_uuid: Annotated[StrictStr, Field(description="Key Item UUID")],
        verify_data_request_dto: VerifyDataRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VerifyDataResponseDto:
        """Verify data using a Key


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param token_profile_uuid: Token Profile UUID (required)
        :type token_profile_uuid: str
        :param uuid: Key UUID (required)
        :type uuid: str
        :param key_item_uuid: Key Item UUID (required)
        :type key_item_uuid: str
        :param verify_data_request_dto: (required)
        :type verify_data_request_dto: VerifyDataRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_data_serialize(
            token_instance_uuid=token_instance_uuid,
            token_profile_uuid=token_profile_uuid,
            uuid=uuid,
            key_item_uuid=key_item_uuid,
            verify_data_request_dto=verify_data_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '422': "List[str]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
            '200': "VerifyDataResponseDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def verify_data_with_http_info(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        token_profile_uuid: Annotated[StrictStr, Field(description="Token Profile UUID")],
        uuid: Annotated[StrictStr, Field(description="Key UUID")],
        key_item_uuid: Annotated[StrictStr, Field(description="Key Item UUID")],
        verify_data_request_dto: VerifyDataRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VerifyDataResponseDto]:
        """Verify data using a Key


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param token_profile_uuid: Token Profile UUID (required)
        :type token_profile_uuid: str
        :param uuid: Key UUID (required)
        :type uuid: str
        :param key_item_uuid: Key Item UUID (required)
        :type key_item_uuid: str
        :param verify_data_request_dto: (required)
        :type verify_data_request_dto: VerifyDataRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_data_serialize(
            token_instance_uuid=token_instance_uuid,
            token_profile_uuid=token_profile_uuid,
            uuid=uuid,
            key_item_uuid=key_item_uuid,
            verify_data_request_dto=verify_data_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '422': "List[str]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
            '200': "VerifyDataResponseDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def verify_data_without_preload_content(
        self,
        token_instance_uuid: Annotated[StrictStr, Field(description="Token Instance UUID")],
        token_profile_uuid: Annotated[StrictStr, Field(description="Token Profile UUID")],
        uuid: Annotated[StrictStr, Field(description="Key UUID")],
        key_item_uuid: Annotated[StrictStr, Field(description="Key Item UUID")],
        verify_data_request_dto: VerifyDataRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Verify data using a Key


        :param token_instance_uuid: Token Instance UUID (required)
        :type token_instance_uuid: str
        :param token_profile_uuid: Token Profile UUID (required)
        :type token_profile_uuid: str
        :param uuid: Key UUID (required)
        :type uuid: str
        :param key_item_uuid: Key Item UUID (required)
        :type key_item_uuid: str
        :param verify_data_request_dto: (required)
        :type verify_data_request_dto: VerifyDataRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_data_serialize(
            token_instance_uuid=token_instance_uuid,
            token_profile_uuid=token_profile_uuid,
            uuid=uuid,
            key_item_uuid=key_item_uuid,
            verify_data_request_dto=verify_data_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '422': "List[str]",
            '401': None,
            '400': "ErrorMessageDto",
            '403': "AuthenticationServiceExceptionDto",
            '404': "ErrorMessageDto",
            '500': None,
            '200': "VerifyDataResponseDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _verify_data_serialize(
        self,
        token_instance_uuid,
        token_profile_uuid,
        uuid,
        key_item_uuid,
        verify_data_request_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if token_instance_uuid is not None:
            _path_params['tokenInstanceUuid'] = token_instance_uuid
        if token_profile_uuid is not None:
            _path_params['tokenProfileUuid'] = token_profile_uuid
        if uuid is not None:
            _path_params['uuid'] = uuid
        if key_item_uuid is not None:
            _path_params['keyItemUuid'] = key_item_uuid
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if verify_data_request_dto is not None:
            _body_params = verify_data_request_dto


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/verify',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


