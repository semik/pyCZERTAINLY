# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.certificate_request_format import CertificateRequestFormat
from openapi_client.models.certificate_type import CertificateType
from openapi_client.models.response_attribute_dto import ResponseAttributeDto
from typing import Optional, Set
from typing_extensions import Self

class CertificateRequestDto(BaseModel):
    """
    Certificate request data
    """ # noqa: E501
    certificate_type: Optional[CertificateType] = Field(default=None, alias="certificateType")
    certificate_request_format: Optional[CertificateRequestFormat] = Field(default=CertificateRequestFormat.PKCS10, alias="certificateRequestFormat")
    public_key_algorithm: StrictStr = Field(description="Public key algorithm", alias="publicKeyAlgorithm")
    signature_algorithm: StrictStr = Field(description="Certificate signature algorithm", alias="signatureAlgorithm")
    content: StrictStr = Field(description="Certificate request content")
    common_name: StrictStr = Field(description="Certificate common name", alias="commonName")
    subject_dn: StrictStr = Field(description="Subject DN of the Certificate", alias="subjectDn")
    subject_alternative_names: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Subject alternative names", alias="subjectAlternativeNames")
    attributes: Optional[List[ResponseAttributeDto]] = Field(default=None, description="CSR Attributes")
    signature_attributes: Optional[List[ResponseAttributeDto]] = Field(default=None, description="Signature Attributes", alias="signatureAttributes")
    __properties: ClassVar[List[str]] = ["certificateType", "certificateRequestFormat", "publicKeyAlgorithm", "signatureAlgorithm", "content", "commonName", "subjectDn", "subjectAlternativeNames", "attributes", "signatureAttributes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificateRequestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in signature_attributes (list)
        _items = []
        if self.signature_attributes:
            for _item_signature_attributes in self.signature_attributes:
                if _item_signature_attributes:
                    _items.append(_item_signature_attributes.to_dict())
            _dict['signatureAttributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificateRequestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificateType": obj.get("certificateType"),
            "certificateRequestFormat": obj.get("certificateRequestFormat") if obj.get("certificateRequestFormat") is not None else CertificateRequestFormat.PKCS10,
            "publicKeyAlgorithm": obj.get("publicKeyAlgorithm"),
            "signatureAlgorithm": obj.get("signatureAlgorithm"),
            "content": obj.get("content"),
            "commonName": obj.get("commonName"),
            "subjectDn": obj.get("subjectDn"),
            "subjectAlternativeNames": obj.get("subjectAlternativeNames"),
            "attributes": [ResponseAttributeDto.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "signatureAttributes": [ResponseAttributeDto.from_dict(_item) for _item in obj["signatureAttributes"]] if obj.get("signatureAttributes") is not None else None
        })
        return _obj


