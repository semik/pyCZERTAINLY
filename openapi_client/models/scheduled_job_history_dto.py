# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource import Resource
from openapi_client.models.scheduler_job_execution_status import SchedulerJobExecutionStatus
from typing import Optional, Set
from typing_extensions import Self

class ScheduledJobHistoryDto(BaseModel):
    """
    Scheduled job history
    """ # noqa: E501
    job_uuid: Optional[StrictStr] = Field(default=None, description="Scheduled job UUID", alias="jobUuid")
    start_time: datetime = Field(description="Start time of triggered task", alias="startTime")
    end_time: Optional[datetime] = Field(default=None, description="End time of triggered task", alias="endTime")
    status: SchedulerJobExecutionStatus
    result_message: Optional[StrictStr] = Field(default=None, description="Message explaining result status", alias="resultMessage")
    result_object_type: Optional[Resource] = Field(default=None, alias="resultObjectType")
    result_object_identification: Optional[List[StrictStr]] = Field(default=None, description="Result object identification (UUID)", alias="resultObjectIdentification")
    __properties: ClassVar[List[str]] = ["jobUuid", "startTime", "endTime", "status", "resultMessage", "resultObjectType", "resultObjectIdentification"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduledJobHistoryDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduledJobHistoryDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "jobUuid": obj.get("jobUuid"),
            "startTime": obj.get("startTime"),
            "endTime": obj.get("endTime"),
            "status": obj.get("status"),
            "resultMessage": obj.get("resultMessage"),
            "resultObjectType": obj.get("resultObjectType"),
            "resultObjectIdentification": obj.get("resultObjectIdentification")
        })
        return _obj


