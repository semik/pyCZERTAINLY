# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.actor_record import ActorRecord
from openapi_client.models.module import Module
from openapi_client.models.operation import Operation
from openapi_client.models.operation_result import OperationResult
from openapi_client.models.resource_record import ResourceRecord
from openapi_client.models.source_record import SourceRecord
from typing import Optional, Set
from typing_extensions import Self

class AuditLogDto(BaseModel):
    """
    Audit log items
    """ # noqa: E501
    id: StrictInt = Field(description="Audit log Id")
    version: StrictStr = Field(description="Log schema version")
    logged_at: datetime = Field(description="Time when the audit log is stored", alias="loggedAt")
    module: Module
    actor: ActorRecord
    source: Optional[SourceRecord] = None
    resource: ResourceRecord
    affiliated_resource: Optional[ResourceRecord] = Field(default=None, alias="affiliatedResource")
    operation: Operation
    operation_result: OperationResult = Field(alias="operationResult")
    message: Optional[StrictStr] = Field(default=None, description="Additional message")
    operation_data: Optional[Dict[str, Any]] = Field(default=None, description="Structured data dependent on resource and its operation", alias="operationData")
    additional_data: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Additional data specific to event logged", alias="additionalData")
    __properties: ClassVar[List[str]] = ["id", "version", "loggedAt", "module", "actor", "source", "resource", "affiliatedResource", "operation", "operationResult", "message", "operationData", "additionalData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuditLogDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of actor
        if self.actor:
            _dict['actor'] = self.actor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource
        if self.resource:
            _dict['resource'] = self.resource.to_dict()
        # override the default output from pydantic by calling `to_dict()` of affiliated_resource
        if self.affiliated_resource:
            _dict['affiliatedResource'] = self.affiliated_resource.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuditLogDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "version": obj.get("version"),
            "loggedAt": obj.get("loggedAt"),
            "module": obj.get("module"),
            "actor": ActorRecord.from_dict(obj["actor"]) if obj.get("actor") is not None else None,
            "source": SourceRecord.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "resource": ResourceRecord.from_dict(obj["resource"]) if obj.get("resource") is not None else None,
            "affiliatedResource": ResourceRecord.from_dict(obj["affiliatedResource"]) if obj.get("affiliatedResource") is not None else None,
            "operation": obj.get("operation"),
            "operationResult": obj.get("operationResult"),
            "message": obj.get("message"),
            "operationData": obj.get("operationData"),
            "additionalData": obj.get("additionalData")
        })
        return _obj


