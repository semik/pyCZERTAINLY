# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.certificate_state import CertificateState
from openapi_client.models.certificate_validation_status import CertificateValidationStatus
from openapi_client.models.metadata_response_dto import MetadataResponseDto
from openapi_client.models.response_attribute_dto import ResponseAttributeDto
from typing import Optional, Set
from typing_extensions import Self

class CertificateInLocationDto(BaseModel):
    """
    List of Certificates in Location
    """ # noqa: E501
    certificate_uuid: StrictStr = Field(description="UUID of the Certificate", alias="certificateUuid")
    state: CertificateState
    validation_status: CertificateValidationStatus = Field(alias="validationStatus")
    common_name: StrictStr = Field(description="Common Name of the Subject DN field of the Certificate", alias="commonName")
    serial_number: StrictStr = Field(description="Serial number in HEX of the Certificate", alias="serialNumber")
    metadata: Optional[List[MetadataResponseDto]] = Field(default=None, description="Metadata of the Certificate in Location")
    push_attributes: Optional[List[ResponseAttributeDto]] = Field(default=None, description="Applied push attributes", alias="pushAttributes")
    csr_attributes: Optional[List[ResponseAttributeDto]] = Field(default=None, description="Applied issue attributes", alias="csrAttributes")
    with_key: Optional[StrictBool] = Field(default=False, description="If the Certificate in Location has associated private key", alias="withKey")
    __properties: ClassVar[List[str]] = ["certificateUuid", "state", "validationStatus", "commonName", "serialNumber", "metadata", "pushAttributes", "csrAttributes", "withKey"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificateInLocationDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item_metadata in self.metadata:
                if _item_metadata:
                    _items.append(_item_metadata.to_dict())
            _dict['metadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in push_attributes (list)
        _items = []
        if self.push_attributes:
            for _item_push_attributes in self.push_attributes:
                if _item_push_attributes:
                    _items.append(_item_push_attributes.to_dict())
            _dict['pushAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in csr_attributes (list)
        _items = []
        if self.csr_attributes:
            for _item_csr_attributes in self.csr_attributes:
                if _item_csr_attributes:
                    _items.append(_item_csr_attributes.to_dict())
            _dict['csrAttributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificateInLocationDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificateUuid": obj.get("certificateUuid"),
            "state": obj.get("state"),
            "validationStatus": obj.get("validationStatus"),
            "commonName": obj.get("commonName"),
            "serialNumber": obj.get("serialNumber"),
            "metadata": [MetadataResponseDto.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "pushAttributes": [ResponseAttributeDto.from_dict(_item) for _item in obj["pushAttributes"]] if obj.get("pushAttributes") is not None else None,
            "csrAttributes": [ResponseAttributeDto.from_dict(_item) for _item in obj["csrAttributes"]] if obj.get("csrAttributes") is not None else None,
            "withKey": obj.get("withKey") if obj.get("withKey") is not None else False
        })
        return _obj


