# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attribute_content_type import AttributeContentType
from openapi_client.models.attribute_type import AttributeType
from typing import Optional, Set
from typing_extensions import Self

class GlobalMetadataDefinitionDetailDto(BaseModel):
    """
    GlobalMetadataDefinitionDetailDto
    """ # noqa: E501
    uuid: StrictStr = Field(description="UUID of the Attribute")
    name: StrictStr = Field(description="Name of the Attribute")
    content_type: AttributeContentType = Field(alias="contentType")
    description: StrictStr = Field(description="Attribute description")
    enabled: Optional[StrictBool] = Field(default=None, description="Boolean determining if the Attribute is enabled. Required only for Custom Attribute")
    type: AttributeType
    label: StrictStr = Field(description="Friendly name of the the Attribute")
    visible: Optional[StrictBool] = Field(default=True, description="Boolean determining if the Attribute is visible and can be displayed, otherwise it should be hidden to the user.")
    group: Optional[StrictStr] = Field(default=None, description="Group of the Attribute, used for the logical grouping of the Attribute")
    __properties: ClassVar[List[str]] = ["uuid", "name", "contentType", "description", "enabled", "type", "label", "visible", "group"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GlobalMetadataDefinitionDetailDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GlobalMetadataDefinitionDetailDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "name": obj.get("name"),
            "contentType": obj.get("contentType"),
            "description": obj.get("description"),
            "enabled": obj.get("enabled"),
            "type": obj.get("type"),
            "label": obj.get("label"),
            "visible": obj.get("visible") if obj.get("visible") is not None else True,
            "group": obj.get("group")
        })
        return _obj


