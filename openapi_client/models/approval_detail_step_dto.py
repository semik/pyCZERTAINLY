# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.approval_step_recipient_dto import ApprovalStepRecipientDto
from typing import Optional, Set
from typing_extensions import Self

class ApprovalDetailStepDto(BaseModel):
    """
    List of Approval steps related to this Approval
    """ # noqa: E501
    user_uuid: Optional[StrictStr] = Field(default=None, description="UUID of the responsible user to approve action in approval step", alias="userUuid")
    role_uuid: Optional[StrictStr] = Field(default=None, description="UUID of the responsible role of the users to approve action in approval step", alias="roleUuid")
    group_uuid: Optional[StrictStr] = Field(default=None, description="UUID of the responsible group of the users to approve action in approval step", alias="groupUuid")
    description: Optional[StrictStr] = Field(default=None, description="Description of the approval step")
    order: StrictInt = Field(description="Order of the position in the approval steps flow")
    required_approvals: Optional[StrictInt] = Field(default=None, description="Count of the required approvals for the approval step, by default there is 1 approval needed.", alias="requiredApprovals")
    uuid: StrictStr = Field(description="UUID of the Approval step")
    username: Optional[StrictStr] = Field(default=None, description="Username of the responsible user to approve action in approval step")
    role_name: Optional[StrictStr] = Field(default=None, description="Name of the responsible role of the users to approve action in approval step", alias="roleName")
    group_name: Optional[StrictStr] = Field(default=None, description="Name of the responsible group of the users to approve action in approval step", alias="groupName")
    approval_step_recipients: List[ApprovalStepRecipientDto] = Field(description="List of the approval recipient related for this step", alias="approvalStepRecipients")
    __properties: ClassVar[List[str]] = ["userUuid", "roleUuid", "groupUuid", "description", "order", "requiredApprovals", "uuid", "username", "roleName", "groupName", "approvalStepRecipients"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApprovalDetailStepDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in approval_step_recipients (list)
        _items = []
        if self.approval_step_recipients:
            for _item_approval_step_recipients in self.approval_step_recipients:
                if _item_approval_step_recipients:
                    _items.append(_item_approval_step_recipients.to_dict())
            _dict['approvalStepRecipients'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApprovalDetailStepDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "userUuid": obj.get("userUuid"),
            "roleUuid": obj.get("roleUuid"),
            "groupUuid": obj.get("groupUuid"),
            "description": obj.get("description"),
            "order": obj.get("order"),
            "requiredApprovals": obj.get("requiredApprovals"),
            "uuid": obj.get("uuid"),
            "username": obj.get("username"),
            "roleName": obj.get("roleName"),
            "groupName": obj.get("groupName"),
            "approvalStepRecipients": [ApprovalStepRecipientDto.from_dict(_item) for _item in obj["approvalStepRecipients"]] if obj.get("approvalStepRecipients") is not None else None
        })
        return _obj


