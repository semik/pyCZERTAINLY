# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.boolean_attribute_content import BooleanAttributeContent
from openapi_client.models.code_block_attribute_content import CodeBlockAttributeContent
from openapi_client.models.credential_attribute_content import CredentialAttributeContent
from openapi_client.models.date_attribute_content import DateAttributeContent
from openapi_client.models.date_time_attribute_content import DateTimeAttributeContent
from openapi_client.models.file_attribute_content import FileAttributeContent
from openapi_client.models.float_attribute_content import FloatAttributeContent
from openapi_client.models.integer_attribute_content import IntegerAttributeContent
from openapi_client.models.object_attribute_content import ObjectAttributeContent
from openapi_client.models.secret_attribute_content import SecretAttributeContent
from openapi_client.models.string_attribute_content import StringAttributeContent
from openapi_client.models.text_attribute_content import TextAttributeContent
from openapi_client.models.time_attribute_content import TimeAttributeContent
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

BASEATTRIBUTECONTENTDTO_ONE_OF_SCHEMAS = ["BooleanAttributeContent", "CodeBlockAttributeContent", "CredentialAttributeContent", "DateAttributeContent", "DateTimeAttributeContent", "FileAttributeContent", "FloatAttributeContent", "IntegerAttributeContent", "ObjectAttributeContent", "SecretAttributeContent", "StringAttributeContent", "TextAttributeContent", "TimeAttributeContent"]

class BaseAttributeContentDto(BaseModel):
    """
    Base Attribute content definition
    """
    # data type: BooleanAttributeContent
    oneof_schema_1_validator: Optional[BooleanAttributeContent] = None
    # data type: CodeBlockAttributeContent
    oneof_schema_2_validator: Optional[CodeBlockAttributeContent] = None
    # data type: CredentialAttributeContent
    oneof_schema_3_validator: Optional[CredentialAttributeContent] = None
    # data type: DateAttributeContent
    oneof_schema_4_validator: Optional[DateAttributeContent] = None
    # data type: DateTimeAttributeContent
    oneof_schema_5_validator: Optional[DateTimeAttributeContent] = None
    # data type: FileAttributeContent
    oneof_schema_6_validator: Optional[FileAttributeContent] = None
    # data type: FloatAttributeContent
    oneof_schema_7_validator: Optional[FloatAttributeContent] = None
    # data type: IntegerAttributeContent
    oneof_schema_8_validator: Optional[IntegerAttributeContent] = None
    # data type: ObjectAttributeContent
    oneof_schema_9_validator: Optional[ObjectAttributeContent] = None
    # data type: SecretAttributeContent
    oneof_schema_10_validator: Optional[SecretAttributeContent] = None
    # data type: StringAttributeContent
    oneof_schema_11_validator: Optional[StringAttributeContent] = None
    # data type: TextAttributeContent
    oneof_schema_12_validator: Optional[TextAttributeContent] = None
    # data type: TimeAttributeContent
    oneof_schema_13_validator: Optional[TimeAttributeContent] = None
    actual_instance: Optional[Union[BooleanAttributeContent, CodeBlockAttributeContent, CredentialAttributeContent, DateAttributeContent, DateTimeAttributeContent, FileAttributeContent, FloatAttributeContent, IntegerAttributeContent, ObjectAttributeContent, SecretAttributeContent, StringAttributeContent, TextAttributeContent, TimeAttributeContent]] = None
    one_of_schemas: Set[str] = { "BooleanAttributeContent", "CodeBlockAttributeContent", "CredentialAttributeContent", "DateAttributeContent", "DateTimeAttributeContent", "FileAttributeContent", "FloatAttributeContent", "IntegerAttributeContent", "ObjectAttributeContent", "SecretAttributeContent", "StringAttributeContent", "TextAttributeContent", "TimeAttributeContent" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = BaseAttributeContentDto.model_construct()
        error_messages = []
        match = 0
        # validate data type: BooleanAttributeContent
        if not isinstance(v, BooleanAttributeContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BooleanAttributeContent`")
        else:
            match += 1
        # validate data type: CodeBlockAttributeContent
        if not isinstance(v, CodeBlockAttributeContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CodeBlockAttributeContent`")
        else:
            match += 1
        # validate data type: CredentialAttributeContent
        if not isinstance(v, CredentialAttributeContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CredentialAttributeContent`")
        else:
            match += 1
        # validate data type: DateAttributeContent
        if not isinstance(v, DateAttributeContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DateAttributeContent`")
        else:
            match += 1
        # validate data type: DateTimeAttributeContent
        if not isinstance(v, DateTimeAttributeContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DateTimeAttributeContent`")
        else:
            match += 1
        # validate data type: FileAttributeContent
        if not isinstance(v, FileAttributeContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FileAttributeContent`")
        else:
            match += 1
        # validate data type: FloatAttributeContent
        if not isinstance(v, FloatAttributeContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FloatAttributeContent`")
        else:
            match += 1
        # validate data type: IntegerAttributeContent
        if not isinstance(v, IntegerAttributeContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IntegerAttributeContent`")
        else:
            match += 1
        # validate data type: ObjectAttributeContent
        if not isinstance(v, ObjectAttributeContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObjectAttributeContent`")
        else:
            match += 1
        # validate data type: SecretAttributeContent
        if not isinstance(v, SecretAttributeContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SecretAttributeContent`")
        else:
            match += 1
        # validate data type: StringAttributeContent
        if not isinstance(v, StringAttributeContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `StringAttributeContent`")
        else:
            match += 1
        # validate data type: TextAttributeContent
        if not isinstance(v, TextAttributeContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TextAttributeContent`")
        else:
            match += 1
        # validate data type: TimeAttributeContent
        if not isinstance(v, TimeAttributeContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TimeAttributeContent`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in BaseAttributeContentDto with oneOf schemas: BooleanAttributeContent, CodeBlockAttributeContent, CredentialAttributeContent, DateAttributeContent, DateTimeAttributeContent, FileAttributeContent, FloatAttributeContent, IntegerAttributeContent, ObjectAttributeContent, SecretAttributeContent, StringAttributeContent, TextAttributeContent, TimeAttributeContent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in BaseAttributeContentDto with oneOf schemas: BooleanAttributeContent, CodeBlockAttributeContent, CredentialAttributeContent, DateAttributeContent, DateTimeAttributeContent, FileAttributeContent, FloatAttributeContent, IntegerAttributeContent, ObjectAttributeContent, SecretAttributeContent, StringAttributeContent, TextAttributeContent, TimeAttributeContent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into BooleanAttributeContent
        try:
            instance.actual_instance = BooleanAttributeContent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CodeBlockAttributeContent
        try:
            instance.actual_instance = CodeBlockAttributeContent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CredentialAttributeContent
        try:
            instance.actual_instance = CredentialAttributeContent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DateAttributeContent
        try:
            instance.actual_instance = DateAttributeContent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DateTimeAttributeContent
        try:
            instance.actual_instance = DateTimeAttributeContent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FileAttributeContent
        try:
            instance.actual_instance = FileAttributeContent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FloatAttributeContent
        try:
            instance.actual_instance = FloatAttributeContent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IntegerAttributeContent
        try:
            instance.actual_instance = IntegerAttributeContent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObjectAttributeContent
        try:
            instance.actual_instance = ObjectAttributeContent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SecretAttributeContent
        try:
            instance.actual_instance = SecretAttributeContent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into StringAttributeContent
        try:
            instance.actual_instance = StringAttributeContent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TextAttributeContent
        try:
            instance.actual_instance = TextAttributeContent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TimeAttributeContent
        try:
            instance.actual_instance = TimeAttributeContent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into BaseAttributeContentDto with oneOf schemas: BooleanAttributeContent, CodeBlockAttributeContent, CredentialAttributeContent, DateAttributeContent, DateTimeAttributeContent, FileAttributeContent, FloatAttributeContent, IntegerAttributeContent, ObjectAttributeContent, SecretAttributeContent, StringAttributeContent, TextAttributeContent, TimeAttributeContent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into BaseAttributeContentDto with oneOf schemas: BooleanAttributeContent, CodeBlockAttributeContent, CredentialAttributeContent, DateAttributeContent, DateTimeAttributeContent, FileAttributeContent, FloatAttributeContent, IntegerAttributeContent, ObjectAttributeContent, SecretAttributeContent, StringAttributeContent, TextAttributeContent, TimeAttributeContent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], BooleanAttributeContent, CodeBlockAttributeContent, CredentialAttributeContent, DateAttributeContent, DateTimeAttributeContent, FileAttributeContent, FloatAttributeContent, IntegerAttributeContent, ObjectAttributeContent, SecretAttributeContent, StringAttributeContent, TextAttributeContent, TimeAttributeContent]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


