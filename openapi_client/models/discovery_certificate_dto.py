# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DiscoveryCertificateDto(BaseModel):
    """
    Certificates
    """ # noqa: E501
    uuid: StrictStr = Field(description="UUID of the Certificate")
    inventory_uuid: Optional[StrictStr] = Field(default=None, description="UUID of the Certificate in Certificate inventory", alias="inventoryUuid")
    common_name: StrictStr = Field(description="Certificate common name", alias="commonName")
    serial_number: StrictStr = Field(description="Certificate Serial Number", alias="serialNumber")
    issuer_common_name: StrictStr = Field(description="Issuer common name", alias="issuerCommonName")
    not_before: datetime = Field(description="Certificate validity start date", alias="notBefore")
    not_after: datetime = Field(description="Certificate expiration date", alias="notAfter")
    fingerprint: StrictStr = Field(description="SHA256 thumbprint of the certificate")
    certificate_content: StrictStr = Field(description="Base64 encoded Certificate content", alias="certificateContent")
    newly_discovered: StrictBool = Field(description="Boolean representing if the certificate is newly discovered. True - Certificate is newly discoveredfalse - Certificate was already available in the inventory", alias="newlyDiscovered")
    processed: StrictBool = Field(description="Indicator whether the discovery certificate has already been processed.")
    processed_error: Optional[StrictStr] = Field(default=None, description="Error message in case of failed processing of the discovery certificate.", alias="processedError")
    __properties: ClassVar[List[str]] = ["uuid", "inventoryUuid", "commonName", "serialNumber", "issuerCommonName", "notBefore", "notAfter", "fingerprint", "certificateContent", "newlyDiscovered", "processed", "processedError"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DiscoveryCertificateDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DiscoveryCertificateDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "inventoryUuid": obj.get("inventoryUuid"),
            "commonName": obj.get("commonName"),
            "serialNumber": obj.get("serialNumber"),
            "issuerCommonName": obj.get("issuerCommonName"),
            "notBefore": obj.get("notBefore"),
            "notAfter": obj.get("notAfter"),
            "fingerprint": obj.get("fingerprint"),
            "certificateContent": obj.get("certificateContent"),
            "newlyDiscovered": obj.get("newlyDiscovered"),
            "processed": obj.get("processed"),
            "processedError": obj.get("processedError")
        })
        return _obj


