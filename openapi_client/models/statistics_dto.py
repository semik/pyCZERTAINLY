# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StatisticsDto(BaseModel):
    """
    StatisticsDto
    """ # noqa: E501
    total_certificates: Optional[StrictInt] = Field(default=None, description="Number Certificates available", alias="totalCertificates")
    total_groups: Optional[StrictInt] = Field(default=None, description="Number of Groups", alias="totalGroups")
    total_discoveries: Optional[StrictInt] = Field(default=None, description="Number of Discoveries triggered", alias="totalDiscoveries")
    total_connectors: Optional[StrictInt] = Field(default=None, description="Number of Connectors added", alias="totalConnectors")
    total_ra_profiles: Optional[StrictInt] = Field(default=None, description="Number of RA Profiles in the platform", alias="totalRaProfiles")
    total_credentials: Optional[StrictInt] = Field(default=None, description="Number of Credentials", alias="totalCredentials")
    total_authorities: Optional[StrictInt] = Field(default=None, description="Number of Authority instances", alias="totalAuthorities")
    total_administrators: Optional[StrictInt] = Field(default=None, description="Number of Administrators", alias="totalAdministrators")
    total_clients: Optional[StrictInt] = Field(default=None, description="Number of Clients added", alias="totalClients")
    group_stat_by_certificate_count: Optional[Dict[str, StrictInt]] = Field(default=None, description="Map of Certificate count by Group", alias="groupStatByCertificateCount")
    ra_profile_stat_by_certificate_count: Optional[Dict[str, StrictInt]] = Field(default=None, description="Map of Certificate count by RA Profile", alias="raProfileStatByCertificateCount")
    certificate_stat_by_type: Optional[Dict[str, StrictInt]] = Field(default=None, description="Map of Certificate count by Type", alias="certificateStatByType")
    certificate_stat_by_expiry: Optional[Dict[str, StrictInt]] = Field(default=None, description="Map of Certificate count by expiry date", alias="certificateStatByExpiry")
    certificate_stat_by_key_size: Optional[Dict[str, StrictInt]] = Field(default=None, description="Map of Certificate count by key size", alias="certificateStatByKeySize")
    certificate_stat_by_subject_type: Optional[Dict[str, StrictInt]] = Field(default=None, description="Map of Certificate count by subject type", alias="certificateStatBySubjectType")
    certificate_stat_by_state: Optional[Dict[str, StrictInt]] = Field(default=None, description="Map of Certificate count by state", alias="certificateStatByState")
    certificate_stat_by_validation_status: Optional[Dict[str, StrictInt]] = Field(default=None, description="Map of Certificate count by validationStatus", alias="certificateStatByValidationStatus")
    certificate_stat_by_compliance_status: Optional[Dict[str, StrictInt]] = Field(default=None, description="Map of Certificate count by compliance status", alias="certificateStatByComplianceStatus")
    connector_stat_by_status: Optional[Dict[str, StrictInt]] = Field(default=None, description="Map of Connector count by status", alias="connectorStatByStatus")
    ra_profile_stat_by_status: Optional[Dict[str, StrictInt]] = Field(default=None, description="Map of RA Profile count by status", alias="raProfileStatByStatus")
    administrator_stat_by_status: Optional[Dict[str, StrictInt]] = Field(default=None, description="Map of Administrator count by status", alias="administratorStatByStatus")
    client_stat_by_status: Optional[Dict[str, StrictInt]] = Field(default=None, description="Map of Client count by status", alias="clientStatByStatus")
    __properties: ClassVar[List[str]] = ["totalCertificates", "totalGroups", "totalDiscoveries", "totalConnectors", "totalRaProfiles", "totalCredentials", "totalAuthorities", "totalAdministrators", "totalClients", "groupStatByCertificateCount", "raProfileStatByCertificateCount", "certificateStatByType", "certificateStatByExpiry", "certificateStatByKeySize", "certificateStatBySubjectType", "certificateStatByState", "certificateStatByValidationStatus", "certificateStatByComplianceStatus", "connectorStatByStatus", "raProfileStatByStatus", "administratorStatByStatus", "clientStatByStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatisticsDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatisticsDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "totalCertificates": obj.get("totalCertificates"),
            "totalGroups": obj.get("totalGroups"),
            "totalDiscoveries": obj.get("totalDiscoveries"),
            "totalConnectors": obj.get("totalConnectors"),
            "totalRaProfiles": obj.get("totalRaProfiles"),
            "totalCredentials": obj.get("totalCredentials"),
            "totalAuthorities": obj.get("totalAuthorities"),
            "totalAdministrators": obj.get("totalAdministrators"),
            "totalClients": obj.get("totalClients"),
            "groupStatByCertificateCount": obj.get("groupStatByCertificateCount"),
            "raProfileStatByCertificateCount": obj.get("raProfileStatByCertificateCount"),
            "certificateStatByType": obj.get("certificateStatByType"),
            "certificateStatByExpiry": obj.get("certificateStatByExpiry"),
            "certificateStatByKeySize": obj.get("certificateStatByKeySize"),
            "certificateStatBySubjectType": obj.get("certificateStatBySubjectType"),
            "certificateStatByState": obj.get("certificateStatByState"),
            "certificateStatByValidationStatus": obj.get("certificateStatByValidationStatus"),
            "certificateStatByComplianceStatus": obj.get("certificateStatByComplianceStatus"),
            "connectorStatByStatus": obj.get("connectorStatByStatus"),
            "raProfileStatByStatus": obj.get("raProfileStatByStatus"),
            "administratorStatByStatus": obj.get("administratorStatByStatus"),
            "clientStatByStatus": obj.get("clientStatByStatus")
        })
        return _obj


