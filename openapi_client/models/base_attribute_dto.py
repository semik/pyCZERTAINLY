# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.custom_attribute import CustomAttribute
from openapi_client.models.data_attribute import DataAttribute
from openapi_client.models.info_attribute import InfoAttribute
from openapi_client.models.metadata_attribute import MetadataAttribute
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

BASEATTRIBUTEDTO_ONE_OF_SCHEMAS = ["CustomAttribute", "DataAttribute", "GroupAttribute", "InfoAttribute", "MetadataAttribute"]

class BaseAttributeDto(BaseModel):
    """
    Base Attribute definition
    """
    # data type: DataAttribute
    oneof_schema_1_validator: Optional[DataAttribute] = None
    # data type: InfoAttribute
    oneof_schema_2_validator: Optional[InfoAttribute] = None
    # data type: GroupAttribute
    oneof_schema_3_validator: Optional[GroupAttribute] = None
    # data type: MetadataAttribute
    oneof_schema_4_validator: Optional[MetadataAttribute] = None
    # data type: CustomAttribute
    oneof_schema_5_validator: Optional[CustomAttribute] = None
    actual_instance: Optional[Union[CustomAttribute, DataAttribute, GroupAttribute, InfoAttribute, MetadataAttribute]] = None
    one_of_schemas: Set[str] = { "CustomAttribute", "DataAttribute", "GroupAttribute", "InfoAttribute", "MetadataAttribute" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = BaseAttributeDto.model_construct()
        error_messages = []
        match = 0
        # validate data type: DataAttribute
        if not isinstance(v, DataAttribute):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DataAttribute`")
        else:
            match += 1
        # validate data type: InfoAttribute
        if not isinstance(v, InfoAttribute):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InfoAttribute`")
        else:
            match += 1
        # validate data type: GroupAttribute
        if not isinstance(v, GroupAttribute):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GroupAttribute`")
        else:
            match += 1
        # validate data type: MetadataAttribute
        if not isinstance(v, MetadataAttribute):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MetadataAttribute`")
        else:
            match += 1
        # validate data type: CustomAttribute
        if not isinstance(v, CustomAttribute):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CustomAttribute`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in BaseAttributeDto with oneOf schemas: CustomAttribute, DataAttribute, GroupAttribute, InfoAttribute, MetadataAttribute. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in BaseAttributeDto with oneOf schemas: CustomAttribute, DataAttribute, GroupAttribute, InfoAttribute, MetadataAttribute. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into DataAttribute
        try:
            instance.actual_instance = DataAttribute.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InfoAttribute
        try:
            instance.actual_instance = InfoAttribute.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GroupAttribute
        try:
            instance.actual_instance = GroupAttribute.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MetadataAttribute
        try:
            instance.actual_instance = MetadataAttribute.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CustomAttribute
        try:
            instance.actual_instance = CustomAttribute.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into BaseAttributeDto with oneOf schemas: CustomAttribute, DataAttribute, GroupAttribute, InfoAttribute, MetadataAttribute. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into BaseAttributeDto with oneOf schemas: CustomAttribute, DataAttribute, GroupAttribute, InfoAttribute, MetadataAttribute. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], CustomAttribute, DataAttribute, GroupAttribute, InfoAttribute, MetadataAttribute]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())

from openapi_client.models.group_attribute import GroupAttribute
# TODO: Rewrite to not use raise_errors
BaseAttributeDto.model_rebuild(raise_errors=False)

