# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pyCZERTAINLY.models.key_algorithm import KeyAlgorithm
from pyCZERTAINLY.models.key_compromise_reason import KeyCompromiseReason
from pyCZERTAINLY.models.key_format import KeyFormat
from pyCZERTAINLY.models.key_state import KeyState
from pyCZERTAINLY.models.key_type import KeyType
from pyCZERTAINLY.models.key_usage import KeyUsage
from pyCZERTAINLY.models.metadata_response_dto import MetadataResponseDto
from typing import Optional, Set
from typing_extensions import Self

class KeyItemDetailDto(BaseModel):
    """
    Key Objects
    """ # noqa: E501
    uuid: StrictStr = Field(description="Object identifier")
    name: StrictStr = Field(description="Object Name")
    key_reference_uuid: StrictStr = Field(description="UUID of the key item in the Connector", alias="keyReferenceUuid")
    type: KeyType
    key_algorithm: KeyAlgorithm = Field(alias="keyAlgorithm")
    format: Optional[KeyFormat] = None
    key_data: Optional[StrictStr] = Field(default=None, description="Key Data", alias="keyData")
    length: Optional[StrictInt] = Field(default=None, description="Key Length")
    metadata: Optional[List[MetadataResponseDto]] = Field(default=None, description="Metadata for the key")
    usage: List[KeyUsage] = Field(description="Key Usages")
    enabled: StrictBool = Field(description="Boolean describing if the key is enabled or not")
    state: KeyState
    reason: Optional[KeyCompromiseReason] = None
    __properties: ClassVar[List[str]] = ["uuid", "name", "keyReferenceUuid", "type", "keyAlgorithm", "format", "keyData", "length", "metadata", "usage", "enabled", "state", "reason"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KeyItemDetailDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item_metadata in self.metadata:
                if _item_metadata:
                    _items.append(_item_metadata.to_dict())
            _dict['metadata'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KeyItemDetailDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "name": obj.get("name"),
            "keyReferenceUuid": obj.get("keyReferenceUuid"),
            "type": obj.get("type"),
            "keyAlgorithm": obj.get("keyAlgorithm"),
            "format": obj.get("format"),
            "keyData": obj.get("keyData"),
            "length": obj.get("length"),
            "metadata": [MetadataResponseDto.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "usage": obj.get("usage"),
            "enabled": obj.get("enabled"),
            "state": obj.get("state"),
            "reason": obj.get("reason")
        })
        return _obj


