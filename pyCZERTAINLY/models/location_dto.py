# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pyCZERTAINLY.models.certificate_in_location_dto import CertificateInLocationDto
from pyCZERTAINLY.models.metadata_response_dto import MetadataResponseDto
from pyCZERTAINLY.models.response_attribute_dto import ResponseAttributeDto
from typing import Optional, Set
from typing_extensions import Self

class LocationDto(BaseModel):
    """
    LocationDto
    """ # noqa: E501
    uuid: StrictStr = Field(description="Object identifier")
    name: StrictStr = Field(description="Object Name")
    description: Optional[StrictStr] = Field(default=None, description="Description of the Location")
    entity_instance_uuid: StrictStr = Field(description="UUID of Entity instance", alias="entityInstanceUuid")
    entity_instance_name: StrictStr = Field(description="Name of Entity instance", alias="entityInstanceName")
    attributes: List[ResponseAttributeDto] = Field(description="List of Location attributes")
    custom_attributes: Optional[List[ResponseAttributeDto]] = Field(default=None, description="List of Custom Attributes", alias="customAttributes")
    enabled: StrictBool = Field(description="Enabled flag - true = enabled; false = disabled")
    support_multiple_entries: StrictBool = Field(description="If the location supports multiple Certificates", alias="supportMultipleEntries")
    support_key_management: StrictBool = Field(description="If the location supports key management operations", alias="supportKeyManagement")
    certificates: List[CertificateInLocationDto] = Field(description="List of Certificates in Location")
    metadata: Optional[List[MetadataResponseDto]] = Field(default=None, description="Location metadata")
    __properties: ClassVar[List[str]] = ["uuid", "name", "description", "entityInstanceUuid", "entityInstanceName", "attributes", "customAttributes", "enabled", "supportMultipleEntries", "supportKeyManagement", "certificates", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LocationDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_attributes (list)
        _items = []
        if self.custom_attributes:
            for _item_custom_attributes in self.custom_attributes:
                if _item_custom_attributes:
                    _items.append(_item_custom_attributes.to_dict())
            _dict['customAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in certificates (list)
        _items = []
        if self.certificates:
            for _item_certificates in self.certificates:
                if _item_certificates:
                    _items.append(_item_certificates.to_dict())
            _dict['certificates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item_metadata in self.metadata:
                if _item_metadata:
                    _items.append(_item_metadata.to_dict())
            _dict['metadata'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LocationDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "entityInstanceUuid": obj.get("entityInstanceUuid"),
            "entityInstanceName": obj.get("entityInstanceName"),
            "attributes": [ResponseAttributeDto.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "customAttributes": [ResponseAttributeDto.from_dict(_item) for _item in obj["customAttributes"]] if obj.get("customAttributes") is not None else None,
            "enabled": obj.get("enabled"),
            "supportMultipleEntries": obj.get("supportMultipleEntries") if obj.get("supportMultipleEntries") is not None else False,
            "supportKeyManagement": obj.get("supportKeyManagement") if obj.get("supportKeyManagement") is not None else False,
            "certificates": [CertificateInLocationDto.from_dict(_item) for _item in obj["certificates"]] if obj.get("certificates") is not None else None,
            "metadata": [MetadataResponseDto.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None
        })
        return _obj


