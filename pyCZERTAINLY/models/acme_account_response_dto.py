# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from pyCZERTAINLY.models.account_status import AccountStatus
from pyCZERTAINLY.models.simplified_ra_profile_dto import SimplifiedRaProfileDto
from typing import Optional, Set
from typing_extensions import Self

class AcmeAccountResponseDto(BaseModel):
    """
    AcmeAccountResponseDto
    """ # noqa: E501
    account_id: StrictStr = Field(description="ID of the Account", alias="accountId")
    uuid: StrictStr = Field(description="UUID of the Account")
    enabled: StrictBool = Field(description="Enabled flag. enabled=true, disabled=false")
    total_orders: StrictInt = Field(description="Order count for the Account", alias="totalOrders")
    successful_orders: StrictInt = Field(description="Number of successful Orders", alias="successfulOrders")
    failed_orders: StrictInt = Field(description="Number of failed Orders", alias="failedOrders")
    pending_orders: StrictInt = Field(description="Number of pending Orders", alias="pendingOrders")
    valid_orders: StrictInt = Field(description="Number of valid Orders", alias="validOrders")
    processing_orders: StrictInt = Field(description="Number of processing Orders", alias="processingOrders")
    status: AccountStatus
    contact: List[StrictStr] = Field(description="Contact information")
    terms_of_service_agreed: StrictBool = Field(description="Terms of Service Agreed", alias="termsOfServiceAgreed")
    ra_profile: SimplifiedRaProfileDto = Field(alias="raProfile")
    acme_profile_name: StrictStr = Field(description="Name of the ACME Profile", alias="acmeProfileName")
    acme_profile_uuid: StrictStr = Field(description="UUID of the ACME Profile", alias="acmeProfileUuid")
    __properties: ClassVar[List[str]] = ["accountId", "uuid", "enabled", "totalOrders", "successfulOrders", "failedOrders", "pendingOrders", "validOrders", "processingOrders", "status", "contact", "termsOfServiceAgreed", "raProfile", "acmeProfileName", "acmeProfileUuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AcmeAccountResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ra_profile
        if self.ra_profile:
            _dict['raProfile'] = self.ra_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AcmeAccountResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "uuid": obj.get("uuid"),
            "enabled": obj.get("enabled"),
            "totalOrders": obj.get("totalOrders"),
            "successfulOrders": obj.get("successfulOrders"),
            "failedOrders": obj.get("failedOrders"),
            "pendingOrders": obj.get("pendingOrders"),
            "validOrders": obj.get("validOrders"),
            "processingOrders": obj.get("processingOrders"),
            "status": obj.get("status"),
            "contact": obj.get("contact"),
            "termsOfServiceAgreed": obj.get("termsOfServiceAgreed"),
            "raProfile": SimplifiedRaProfileDto.from_dict(obj["raProfile"]) if obj.get("raProfile") is not None else None,
            "acmeProfileName": obj.get("acmeProfileName"),
            "acmeProfileUuid": obj.get("acmeProfileUuid")
        })
        return _obj


