# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pyCZERTAINLY.models.key_usage import KeyUsage
from pyCZERTAINLY.models.token_instance_status import TokenInstanceStatus
from typing import Optional, Set
from typing_extensions import Self

class TokenProfileDto(BaseModel):
    """
    TokenProfileDto
    """ # noqa: E501
    uuid: StrictStr = Field(description="Object identifier")
    name: StrictStr = Field(description="Object Name")
    description: Optional[StrictStr] = Field(default=None, description="Description of Token Profile")
    token_instance_uuid: StrictStr = Field(description="UUID of Token Instance", alias="tokenInstanceUuid")
    token_instance_name: StrictStr = Field(description="Name of Token instance", alias="tokenInstanceName")
    token_instance_status: TokenInstanceStatus = Field(alias="tokenInstanceStatus")
    enabled: StrictBool = Field(description="Enabled flag - true = enabled; false = disabled")
    usages: List[KeyUsage] = Field(description="Usages for the Keys assoiated to the profile")
    __properties: ClassVar[List[str]] = ["uuid", "name", "description", "tokenInstanceUuid", "tokenInstanceName", "tokenInstanceStatus", "enabled", "usages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TokenProfileDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TokenProfileDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "tokenInstanceUuid": obj.get("tokenInstanceUuid"),
            "tokenInstanceName": obj.get("tokenInstanceName"),
            "tokenInstanceStatus": obj.get("tokenInstanceStatus"),
            "enabled": obj.get("enabled"),
            "usages": obj.get("usages")
        })
        return _obj


