# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pyCZERTAINLY.models.auth_type import AuthType
from pyCZERTAINLY.models.request_attribute_dto import RequestAttributeDto
from typing import Optional, Set
from typing_extensions import Self

class ConnectRequestDto(BaseModel):
    """
    ConnectRequestDto
    """ # noqa: E501
    url: StrictStr = Field(description="URL of the Connector to connect")
    uuid: Optional[StrictStr] = Field(default=None, description="UUID of the Connector. Mandatory if connection is needed for the same Connector")
    auth_type: AuthType = Field(alias="authType")
    auth_attributes: Optional[List[RequestAttributeDto]] = Field(default=None, description="List of authentication Attributes. Required if the authentication type is not NONE", alias="authAttributes")
    __properties: ClassVar[List[str]] = ["url", "uuid", "authType", "authAttributes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConnectRequestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in auth_attributes (list)
        _items = []
        if self.auth_attributes:
            for _item_auth_attributes in self.auth_attributes:
                if _item_auth_attributes:
                    _items.append(_item_auth_attributes.to_dict())
            _dict['authAttributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConnectRequestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "url": obj.get("url"),
            "uuid": obj.get("uuid"),
            "authType": obj.get("authType"),
            "authAttributes": [RequestAttributeDto.from_dict(_item) for _item in obj["authAttributes"]] if obj.get("authAttributes") is not None else None
        })
        return _obj


