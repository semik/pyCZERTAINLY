# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pyCZERTAINLY.models.request_attribute_dto import RequestAttributeDto
from typing import Optional, Set
from typing_extensions import Self

class ScepProfileEditRequestDto(BaseModel):
    """
    ScepProfileEditRequestDto
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Description of the SCEP Profile")
    ra_profile_uuid: Optional[StrictStr] = Field(default=None, description="RA Profile UUID", alias="raProfileUuid")
    issue_certificate_attributes: List[RequestAttributeDto] = Field(description="List of Attributes to issue Certificate", alias="issueCertificateAttributes")
    ca_certificate_uuid: StrictStr = Field(description="UUID of the Certificate to be used as CA Certificate for SCEP Requests", alias="caCertificateUuid")
    custom_attributes: Optional[List[RequestAttributeDto]] = Field(default=None, description="List of Custom Attributes", alias="customAttributes")
    renewal_threshold: Optional[StrictInt] = Field(default=None, description="Minimum expiry days to allow renewal of certificate. Empty or the value '0' will be considered as null and half life of the certificate validity will be considered for the protocol", alias="renewalThreshold")
    include_ca_certificate: Optional[StrictBool] = Field(default=False, description="Include CA Certificate in the SCEP Message response", alias="includeCaCertificate")
    include_ca_certificate_chain: Optional[StrictBool] = Field(default=False, description="Include CA Certificate Chain in the SCEP Message response", alias="includeCaCertificateChain")
    challenge_password: Optional[StrictStr] = Field(default=None, description="Challenge Password for the SCEP Request", alias="challengePassword")
    enable_intune: Optional[StrictBool] = Field(default=None, description="Status of Intune", alias="enableIntune")
    intune_tenant: Optional[StrictStr] = Field(default=None, description="Intune Tenant", alias="intuneTenant")
    intune_application_id: Optional[StrictStr] = Field(default=None, description="Intune Application ID", alias="intuneApplicationId")
    intune_application_key: Optional[StrictStr] = Field(default=None, description="Intune Application Key", alias="intuneApplicationKey")
    __properties: ClassVar[List[str]] = ["description", "raProfileUuid", "issueCertificateAttributes", "caCertificateUuid", "customAttributes", "renewalThreshold", "includeCaCertificate", "includeCaCertificateChain", "challengePassword", "enableIntune", "intuneTenant", "intuneApplicationId", "intuneApplicationKey"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScepProfileEditRequestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in issue_certificate_attributes (list)
        _items = []
        if self.issue_certificate_attributes:
            for _item_issue_certificate_attributes in self.issue_certificate_attributes:
                if _item_issue_certificate_attributes:
                    _items.append(_item_issue_certificate_attributes.to_dict())
            _dict['issueCertificateAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_attributes (list)
        _items = []
        if self.custom_attributes:
            for _item_custom_attributes in self.custom_attributes:
                if _item_custom_attributes:
                    _items.append(_item_custom_attributes.to_dict())
            _dict['customAttributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScepProfileEditRequestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "raProfileUuid": obj.get("raProfileUuid"),
            "issueCertificateAttributes": [RequestAttributeDto.from_dict(_item) for _item in obj["issueCertificateAttributes"]] if obj.get("issueCertificateAttributes") is not None else None,
            "caCertificateUuid": obj.get("caCertificateUuid"),
            "customAttributes": [RequestAttributeDto.from_dict(_item) for _item in obj["customAttributes"]] if obj.get("customAttributes") is not None else None,
            "renewalThreshold": obj.get("renewalThreshold"),
            "includeCaCertificate": obj.get("includeCaCertificate") if obj.get("includeCaCertificate") is not None else False,
            "includeCaCertificateChain": obj.get("includeCaCertificateChain") if obj.get("includeCaCertificateChain") is not None else False,
            "challengePassword": obj.get("challengePassword"),
            "enableIntune": obj.get("enableIntune"),
            "intuneTenant": obj.get("intuneTenant"),
            "intuneApplicationId": obj.get("intuneApplicationId"),
            "intuneApplicationKey": obj.get("intuneApplicationKey")
        })
        return _obj


