# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from pyCZERTAINLY.models.protection_method import ProtectionMethod
from pyCZERTAINLY.models.request_attribute_dto import RequestAttributeDto
from typing import Optional, Set
from typing_extensions import Self

class CmpProfileEditRequestDto(BaseModel):
    """
    CmpProfileEditRequestDto
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Description of the CMP Profile")
    ra_profile_uuid: Optional[StrictStr] = Field(default=None, description="RA Profile UUID that the CMP Profile is associated with", alias="raProfileUuid")
    issue_certificate_attributes: Optional[List[RequestAttributeDto]] = Field(default=None, description="List of Attributes to issue Certificate for the associated RA Profile. Required when raProfileUuid is provided", alias="issueCertificateAttributes")
    revoke_certificate_attributes: Optional[List[RequestAttributeDto]] = Field(default=None, description="List of Attributes to revoke Certificate for the associated RA Profile. Required when raProfileUuid is provided", alias="revokeCertificateAttributes")
    custom_attributes: Optional[List[RequestAttributeDto]] = Field(default=None, description="List of Custom Attributes for CMP Profile", alias="customAttributes")
    request_protection_method: ProtectionMethod = Field(alias="requestProtectionMethod")
    response_protection_method: ProtectionMethod = Field(alias="responseProtectionMethod")
    shared_secret: Optional[StrictStr] = Field(default=None, description="Shared secret for the CMP Request. Required when requestProtectionMethod is sharedSecret", alias="sharedSecret")
    signing_certificate_uuid: Optional[StrictStr] = Field(default=None, description="UUID of the Certificate to be used as signing certificate for CMP responses. Required when responseProtectionMethod is signature", alias="signingCertificateUuid")
    name: StrictStr = Field(description="Name of the CMP Profile")
    variant: StrictStr = Field(description="Variant of the CMP Profile")
    __properties: ClassVar[List[str]] = ["description", "raProfileUuid", "issueCertificateAttributes", "revokeCertificateAttributes", "customAttributes", "requestProtectionMethod", "responseProtectionMethod", "sharedSecret", "signingCertificateUuid", "name", "variant"]

    @field_validator('variant')
    def variant_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['v2', 'v2_3gpp', 'v3']):
            raise ValueError("must be one of enum values ('v2', 'v2_3gpp', 'v3')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CmpProfileEditRequestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in issue_certificate_attributes (list)
        _items = []
        if self.issue_certificate_attributes:
            for _item_issue_certificate_attributes in self.issue_certificate_attributes:
                if _item_issue_certificate_attributes:
                    _items.append(_item_issue_certificate_attributes.to_dict())
            _dict['issueCertificateAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in revoke_certificate_attributes (list)
        _items = []
        if self.revoke_certificate_attributes:
            for _item_revoke_certificate_attributes in self.revoke_certificate_attributes:
                if _item_revoke_certificate_attributes:
                    _items.append(_item_revoke_certificate_attributes.to_dict())
            _dict['revokeCertificateAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_attributes (list)
        _items = []
        if self.custom_attributes:
            for _item_custom_attributes in self.custom_attributes:
                if _item_custom_attributes:
                    _items.append(_item_custom_attributes.to_dict())
            _dict['customAttributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CmpProfileEditRequestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "raProfileUuid": obj.get("raProfileUuid"),
            "issueCertificateAttributes": [RequestAttributeDto.from_dict(_item) for _item in obj["issueCertificateAttributes"]] if obj.get("issueCertificateAttributes") is not None else None,
            "revokeCertificateAttributes": [RequestAttributeDto.from_dict(_item) for _item in obj["revokeCertificateAttributes"]] if obj.get("revokeCertificateAttributes") is not None else None,
            "customAttributes": [RequestAttributeDto.from_dict(_item) for _item in obj["customAttributes"]] if obj.get("customAttributes") is not None else None,
            "requestProtectionMethod": obj.get("requestProtectionMethod"),
            "responseProtectionMethod": obj.get("responseProtectionMethod"),
            "sharedSecret": obj.get("sharedSecret"),
            "signingCertificateUuid": obj.get("signingCertificateUuid"),
            "name": obj.get("name"),
            "variant": obj.get("variant")
        })
        return _obj


