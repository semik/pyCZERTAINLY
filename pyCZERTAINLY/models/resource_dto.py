# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List
from pyCZERTAINLY.models.resource import Resource
from typing import Optional, Set
from typing_extensions import Self

class ResourceDto(BaseModel):
    """
    ResourceDto
    """ # noqa: E501
    resource: Resource
    has_object_access: StrictBool = Field(description="If resource has Object access permissions. True = Yes, False = No", alias="hasObjectAccess")
    has_custom_attributes: StrictBool = Field(description="Support assigning custom attributes to resource objects", alias="hasCustomAttributes")
    has_groups: StrictBool = Field(description="Support assigning groups to resource objects", alias="hasGroups")
    has_owner: StrictBool = Field(description="Support assigning owner to resource objects", alias="hasOwner")
    has_events: StrictBool = Field(description="Has events that can be used in triggers", alias="hasEvents")
    has_rule_evaluator: StrictBool = Field(description="Has rule evaluator that can evaluate conditions and actions", alias="hasRuleEvaluator")
    __properties: ClassVar[List[str]] = ["resource", "hasObjectAccess", "hasCustomAttributes", "hasGroups", "hasOwner", "hasEvents", "hasRuleEvaluator"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "resource": obj.get("resource"),
            "hasObjectAccess": obj.get("hasObjectAccess"),
            "hasCustomAttributes": obj.get("hasCustomAttributes"),
            "hasGroups": obj.get("hasGroups"),
            "hasOwner": obj.get("hasOwner"),
            "hasEvents": obj.get("hasEvents"),
            "hasRuleEvaluator": obj.get("hasRuleEvaluator")
        })
        return _obj


