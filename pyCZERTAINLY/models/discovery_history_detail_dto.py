# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pyCZERTAINLY.models.discovery_status import DiscoveryStatus
from pyCZERTAINLY.models.metadata_response_dto import MetadataResponseDto
from pyCZERTAINLY.models.response_attribute_dto import ResponseAttributeDto
from pyCZERTAINLY.models.trigger_dto import TriggerDto
from typing import Optional, Set
from typing_extensions import Self

class DiscoveryHistoryDetailDto(BaseModel):
    """
    DiscoveryHistoryDetailDto
    """ # noqa: E501
    uuid: StrictStr = Field(description="Object identifier")
    name: StrictStr = Field(description="Object Name")
    kind: StrictStr = Field(description="Discovery Kind")
    status: DiscoveryStatus
    connector_status: DiscoveryStatus = Field(alias="connectorStatus")
    message: Optional[StrictStr] = Field(default=None, description="Failure/Success Messages")
    start_time: Optional[datetime] = Field(default=None, description="Date and time when Discovery started", alias="startTime")
    end_time: Optional[datetime] = Field(default=None, description="Date and time when Discovery finished", alias="endTime")
    total_certificates_discovered: Optional[StrictInt] = Field(default=0, description="Number of certificates that are discovered", alias="totalCertificatesDiscovered")
    connector_total_certificates_discovered: Optional[StrictInt] = Field(default=0, description="Number of certificates that were discovered by connector", alias="connectorTotalCertificatesDiscovered")
    connector_uuid: StrictStr = Field(description="UUID of the Discovery Provider", alias="connectorUuid")
    connector_name: StrictStr = Field(description="Name of the Discovery Provider", alias="connectorName")
    attributes: List[ResponseAttributeDto] = Field(description="List of Discovery Attributes")
    custom_attributes: Optional[List[ResponseAttributeDto]] = Field(default=None, description="List of Custom Attributes", alias="customAttributes")
    metadata: Optional[List[MetadataResponseDto]] = Field(default=None, description="Metadata of the Discovery")
    triggers: List[TriggerDto] = Field(description="List of associated triggers")
    __properties: ClassVar[List[str]] = ["uuid", "name", "kind", "status", "connectorStatus", "message", "startTime", "endTime", "totalCertificatesDiscovered", "connectorTotalCertificatesDiscovered", "connectorUuid", "connectorName", "attributes", "customAttributes", "metadata", "triggers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DiscoveryHistoryDetailDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_attributes (list)
        _items = []
        if self.custom_attributes:
            for _item_custom_attributes in self.custom_attributes:
                if _item_custom_attributes:
                    _items.append(_item_custom_attributes.to_dict())
            _dict['customAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item_metadata in self.metadata:
                if _item_metadata:
                    _items.append(_item_metadata.to_dict())
            _dict['metadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in triggers (list)
        _items = []
        if self.triggers:
            for _item_triggers in self.triggers:
                if _item_triggers:
                    _items.append(_item_triggers.to_dict())
            _dict['triggers'] = _items
        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['startTime'] = None

        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['endTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DiscoveryHistoryDetailDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "name": obj.get("name"),
            "kind": obj.get("kind"),
            "status": obj.get("status"),
            "connectorStatus": obj.get("connectorStatus"),
            "message": obj.get("message"),
            "startTime": obj.get("startTime"),
            "endTime": obj.get("endTime"),
            "totalCertificatesDiscovered": obj.get("totalCertificatesDiscovered") if obj.get("totalCertificatesDiscovered") is not None else 0,
            "connectorTotalCertificatesDiscovered": obj.get("connectorTotalCertificatesDiscovered") if obj.get("connectorTotalCertificatesDiscovered") is not None else 0,
            "connectorUuid": obj.get("connectorUuid"),
            "connectorName": obj.get("connectorName"),
            "attributes": [ResponseAttributeDto.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "customAttributes": [ResponseAttributeDto.from_dict(_item) for _item in obj["customAttributes"]] if obj.get("customAttributes") is not None else None,
            "metadata": [MetadataResponseDto.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "triggers": [TriggerDto.from_dict(_item) for _item in obj["triggers"]] if obj.get("triggers") is not None else None
        })
        return _obj


