# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pyCZERTAINLY.models.attribute_content_type import AttributeContentType
from pyCZERTAINLY.models.attribute_type import AttributeType
from pyCZERTAINLY.models.attribute_value_target import AttributeValueTarget
from typing import Optional, Set
from typing_extensions import Self

class AttributeCallbackMapping(BaseModel):
    """
    Mappings for the callback method
    """ # noqa: E501
    var_from: Optional[StrictStr] = Field(default=None, description="Name of the attribute whose value is to be used as value of path variable or request param or body field.It is optional and must be set only if value is not set.", alias="from")
    attribute_type: Optional[AttributeType] = Field(default=None, alias="attributeType")
    attribute_content_type: Optional[AttributeContentType] = Field(default=None, alias="attributeContentType")
    to: StrictStr = Field(description="Name of the path variable or request param or body field which is to be used to assign value of attribute")
    targets: List[AttributeValueTarget] = Field(description="Set of targets for propagating value.")
    value: Optional[Dict[str, Any]] = Field(default=None, description="Static value to be propagated to targets. It is optional and is set only if the value is known at attribute creation time.")
    __properties: ClassVar[List[str]] = ["from", "attributeType", "attributeContentType", "to", "targets", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttributeCallbackMapping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttributeCallbackMapping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "from": obj.get("from"),
            "attributeType": obj.get("attributeType"),
            "attributeContentType": obj.get("attributeContentType"),
            "to": obj.get("to"),
            "targets": obj.get("targets"),
            "value": obj.get("value")
        })
        return _obj


