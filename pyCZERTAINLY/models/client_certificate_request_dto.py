# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pyCZERTAINLY.models.certificate_request_format import CertificateRequestFormat
from pyCZERTAINLY.models.request_attribute_dto import RequestAttributeDto
from typing import Optional, Set
from typing_extensions import Self

class ClientCertificateRequestDto(BaseModel):
    """
    ClientCertificateRequestDto
    """ # noqa: E501
    ra_profile_uuid: StrictStr = Field(description="RA Profile UUID. Required if CSR is not uploaded", alias="raProfileUuid")
    source_certificate_uuid: Optional[StrictStr] = Field(default=None, description="Source certificate UUID to specify in case of renew/rekey operation", alias="sourceCertificateUuid")
    csr_attributes: Optional[List[RequestAttributeDto]] = Field(default=None, description="List of attributes to create CSR. Required if CSR is not provided", alias="csrAttributes")
    signature_attributes: Optional[List[RequestAttributeDto]] = Field(default=None, description="List of attributes to sign the CSR", alias="signatureAttributes")
    request: Optional[StrictStr] = Field(default=None, description="Certificate signing request encoded as Base64 string")
    format: Optional[CertificateRequestFormat] = CertificateRequestFormat.PKCS10
    token_profile_uuid: Optional[StrictStr] = Field(default=None, description="Token Profile UUID. Required if CSR is not uploaded", alias="tokenProfileUuid")
    key_uuid: Optional[StrictStr] = Field(default=None, description="Key UUID. Required if CSR is not uploaded", alias="keyUuid")
    issue_attributes: List[RequestAttributeDto] = Field(description="List of RA Profile related Attributes to issue Certificate", alias="issueAttributes")
    custom_attributes: Optional[List[RequestAttributeDto]] = Field(default=None, description="List of Custom Attributes", alias="customAttributes")
    __properties: ClassVar[List[str]] = ["raProfileUuid", "sourceCertificateUuid", "csrAttributes", "signatureAttributes", "request", "format", "tokenProfileUuid", "keyUuid", "issueAttributes", "customAttributes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientCertificateRequestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in csr_attributes (list)
        _items = []
        if self.csr_attributes:
            for _item_csr_attributes in self.csr_attributes:
                if _item_csr_attributes:
                    _items.append(_item_csr_attributes.to_dict())
            _dict['csrAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in signature_attributes (list)
        _items = []
        if self.signature_attributes:
            for _item_signature_attributes in self.signature_attributes:
                if _item_signature_attributes:
                    _items.append(_item_signature_attributes.to_dict())
            _dict['signatureAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in issue_attributes (list)
        _items = []
        if self.issue_attributes:
            for _item_issue_attributes in self.issue_attributes:
                if _item_issue_attributes:
                    _items.append(_item_issue_attributes.to_dict())
            _dict['issueAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_attributes (list)
        _items = []
        if self.custom_attributes:
            for _item_custom_attributes in self.custom_attributes:
                if _item_custom_attributes:
                    _items.append(_item_custom_attributes.to_dict())
            _dict['customAttributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientCertificateRequestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "raProfileUuid": obj.get("raProfileUuid"),
            "sourceCertificateUuid": obj.get("sourceCertificateUuid"),
            "csrAttributes": [RequestAttributeDto.from_dict(_item) for _item in obj["csrAttributes"]] if obj.get("csrAttributes") is not None else None,
            "signatureAttributes": [RequestAttributeDto.from_dict(_item) for _item in obj["signatureAttributes"]] if obj.get("signatureAttributes") is not None else None,
            "request": obj.get("request"),
            "format": obj.get("format") if obj.get("format") is not None else CertificateRequestFormat.PKCS10,
            "tokenProfileUuid": obj.get("tokenProfileUuid"),
            "keyUuid": obj.get("keyUuid"),
            "issueAttributes": [RequestAttributeDto.from_dict(_item) for _item in obj["issueAttributes"]] if obj.get("issueAttributes") is not None else None,
            "customAttributes": [RequestAttributeDto.from_dict(_item) for _item in obj["customAttributes"]] if obj.get("customAttributes") is not None else None
        })
        return _obj


