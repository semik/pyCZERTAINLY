# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pyCZERTAINLY.models.health_status import HealthStatus
from typing import Optional, Set
from typing_extensions import Self

class HealthDto(BaseModel):
    """
    HealthDto
    """ # noqa: E501
    status: HealthStatus
    description: Optional[StrictStr] = Field(default=None, description="Detailed status description")
    parts: Optional[Dict[str, HealthDto]] = Field(default=None, description="Nested status of services")
    __properties: ClassVar[List[str]] = ["status", "description", "parts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HealthDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in parts (dict)
        _field_dict = {}
        if self.parts:
            for _key_parts in self.parts:
                if self.parts[_key_parts]:
                    _field_dict[_key_parts] = self.parts[_key_parts].to_dict()
            _dict['parts'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HealthDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "description": obj.get("description"),
            "parts": dict(
                (_k, HealthDto.from_dict(_v))
                for _k, _v in obj["parts"].items()
            )
            if obj.get("parts") is not None
            else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
HealthDto.model_rebuild(raise_errors=False)

