# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pyCZERTAINLY.models.response_attribute_dto import ResponseAttributeDto
from pyCZERTAINLY.models.simplified_ra_profile_dto import SimplifiedRaProfileDto
from typing import Optional, Set
from typing_extensions import Self

class AcmeProfileDto(BaseModel):
    """
    AcmeProfileDto
    """ # noqa: E501
    uuid: StrictStr = Field(description="Object identifier")
    name: StrictStr = Field(description="Object Name")
    enabled: StrictBool = Field(description="Enabled flag - true = enabled; false = disabled")
    description: Optional[StrictStr] = Field(default=None, description="ACME Profile description")
    terms_of_service_url: Optional[StrictStr] = Field(default=None, description="Terms of Service URL", alias="termsOfServiceUrl")
    website_url: Optional[StrictStr] = Field(default=None, description="Website URL", alias="websiteUrl")
    dns_resolver_ip: Optional[StrictStr] = Field(default=None, description="DNS Resolver IP address", alias="dnsResolverIp")
    dns_resolver_port: Optional[StrictStr] = Field(default=None, description="DNS Resolver port number", alias="dnsResolverPort")
    ra_profile: Optional[SimplifiedRaProfileDto] = Field(default=None, alias="raProfile")
    retry_interval: Optional[StrictInt] = Field(default=None, description="Retry interval for ACME client requests", alias="retryInterval")
    terms_of_service_change_disable: Optional[StrictBool] = Field(default=None, description="Disable new Orders (change in Terms of Service)", alias="termsOfServiceChangeDisable")
    validity: Optional[StrictInt] = Field(default=None, description="Order validity")
    directory_url: Optional[StrictStr] = Field(default=None, description="ACME Directory URL", alias="directoryUrl")
    terms_of_service_change_url: Optional[StrictStr] = Field(default=None, description="Changes of Terms of Service URL", alias="termsOfServiceChangeUrl")
    require_contact: Optional[StrictBool] = Field(default=None, description="Require Contact information for new Account", alias="requireContact")
    require_terms_of_service: Optional[StrictBool] = Field(default=None, description="Require new Account to agree on Terms of Service", alias="requireTermsOfService")
    issue_certificate_attributes: Optional[List[ResponseAttributeDto]] = Field(default=None, description="List of Attributes to issue a Certificate", alias="issueCertificateAttributes")
    revoke_certificate_attributes: Optional[List[ResponseAttributeDto]] = Field(default=None, description="List of Attributes to revoke a Certificate", alias="revokeCertificateAttributes")
    custom_attributes: Optional[List[ResponseAttributeDto]] = Field(default=None, description="List of Custom Attributes", alias="customAttributes")
    __properties: ClassVar[List[str]] = ["uuid", "name", "enabled", "description", "termsOfServiceUrl", "websiteUrl", "dnsResolverIp", "dnsResolverPort", "raProfile", "retryInterval", "termsOfServiceChangeDisable", "validity", "directoryUrl", "termsOfServiceChangeUrl", "requireContact", "requireTermsOfService", "issueCertificateAttributes", "revokeCertificateAttributes", "customAttributes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AcmeProfileDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ra_profile
        if self.ra_profile:
            _dict['raProfile'] = self.ra_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in issue_certificate_attributes (list)
        _items = []
        if self.issue_certificate_attributes:
            for _item_issue_certificate_attributes in self.issue_certificate_attributes:
                if _item_issue_certificate_attributes:
                    _items.append(_item_issue_certificate_attributes.to_dict())
            _dict['issueCertificateAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in revoke_certificate_attributes (list)
        _items = []
        if self.revoke_certificate_attributes:
            for _item_revoke_certificate_attributes in self.revoke_certificate_attributes:
                if _item_revoke_certificate_attributes:
                    _items.append(_item_revoke_certificate_attributes.to_dict())
            _dict['revokeCertificateAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_attributes (list)
        _items = []
        if self.custom_attributes:
            for _item_custom_attributes in self.custom_attributes:
                if _item_custom_attributes:
                    _items.append(_item_custom_attributes.to_dict())
            _dict['customAttributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AcmeProfileDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "name": obj.get("name"),
            "enabled": obj.get("enabled"),
            "description": obj.get("description"),
            "termsOfServiceUrl": obj.get("termsOfServiceUrl"),
            "websiteUrl": obj.get("websiteUrl"),
            "dnsResolverIp": obj.get("dnsResolverIp"),
            "dnsResolverPort": obj.get("dnsResolverPort"),
            "raProfile": SimplifiedRaProfileDto.from_dict(obj["raProfile"]) if obj.get("raProfile") is not None else None,
            "retryInterval": obj.get("retryInterval"),
            "termsOfServiceChangeDisable": obj.get("termsOfServiceChangeDisable"),
            "validity": obj.get("validity"),
            "directoryUrl": obj.get("directoryUrl"),
            "termsOfServiceChangeUrl": obj.get("termsOfServiceChangeUrl"),
            "requireContact": obj.get("requireContact"),
            "requireTermsOfService": obj.get("requireTermsOfService"),
            "issueCertificateAttributes": [ResponseAttributeDto.from_dict(_item) for _item in obj["issueCertificateAttributes"]] if obj.get("issueCertificateAttributes") is not None else None,
            "revokeCertificateAttributes": [ResponseAttributeDto.from_dict(_item) for _item in obj["revokeCertificateAttributes"]] if obj.get("revokeCertificateAttributes") is not None else None,
            "customAttributes": [ResponseAttributeDto.from_dict(_item) for _item in obj["customAttributes"]] if obj.get("customAttributes") is not None else None
        })
        return _obj


