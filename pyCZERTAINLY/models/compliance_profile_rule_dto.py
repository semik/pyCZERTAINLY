# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pyCZERTAINLY.models.certificate_type import CertificateType
from pyCZERTAINLY.models.response_attribute_dto import ResponseAttributeDto
from typing import Optional, Set
from typing_extensions import Self

class ComplianceProfileRuleDto(BaseModel):
    """
    ComplianceProfileRuleDto
    """ # noqa: E501
    uuid: StrictStr = Field(description="Object identifier")
    name: StrictStr = Field(description="Object Name")
    description: Optional[StrictStr] = Field(default=None, description="Description of the rule")
    connector_name: StrictStr = Field(description="Connector Name", alias="connectorName")
    connector_uuid: StrictStr = Field(description="Connector UUID", alias="connectorUuid")
    kind: StrictStr = Field(description="Connector Kind")
    group_uuid: Optional[StrictStr] = Field(default=None, description="Group UUID", alias="groupUuid")
    certificate_type: CertificateType = Field(alias="certificateType")
    attributes: List[ResponseAttributeDto] = Field(description="List of attributes for the rule")
    compliance_profile_uuid: StrictStr = Field(description="UUID of the Compliance Profile", alias="complianceProfileUuid")
    compliance_profile_name: StrictStr = Field(description="Name of the Compliance Profile", alias="complianceProfileName")
    __properties: ClassVar[List[str]] = ["uuid", "name", "description", "connectorName", "connectorUuid", "kind", "groupUuid", "certificateType", "attributes", "complianceProfileUuid", "complianceProfileName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComplianceProfileRuleDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComplianceProfileRuleDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "connectorName": obj.get("connectorName"),
            "connectorUuid": obj.get("connectorUuid"),
            "kind": obj.get("kind"),
            "groupUuid": obj.get("groupUuid"),
            "certificateType": obj.get("certificateType"),
            "attributes": [ResponseAttributeDto.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "complianceProfileUuid": obj.get("complianceProfileUuid"),
            "complianceProfileName": obj.get("complianceProfileName")
        })
        return _obj


