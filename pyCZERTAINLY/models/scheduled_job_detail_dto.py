# coding: utf-8

"""
    CZERTAINLY Core API

    REST API for CZERTAINLY Core

    The version of the OpenAPI document: 2.13.2-SNAPSHOT
    Contact: info@czertainly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pyCZERTAINLY.models.scheduler_job_execution_status import SchedulerJobExecutionStatus
from typing import Optional, Set
from typing_extensions import Self

class ScheduledJobDetailDto(BaseModel):
    """
    ScheduledJobDetailDto
    """ # noqa: E501
    uuid: StrictStr = Field(description="UUID of the scheduled job")
    job_name: StrictStr = Field(description="Name of the scheduled job", alias="jobName")
    job_type: StrictStr = Field(description="Type of scheduled job (job processor name)", alias="jobType")
    cron_expression: StrictStr = Field(description="CRON expression representing configuration of pattern how to run scheduled job", alias="cronExpression")
    enabled: StrictBool = Field(description="Status of the scheduled job. True = Enabled, False = Disabled")
    one_time: StrictBool = Field(description="Is scheduled job triggered only once", alias="oneTime")
    system: StrictBool = Field(description="Is system scheduled job")
    last_execution_status: SchedulerJobExecutionStatus = Field(alias="lastExecutionStatus")
    user_uuid: Optional[StrictStr] = Field(default=None, alias="userUuid")
    object_data: Optional[Dict[str, Any]] = Field(default=None, alias="objectData")
    __properties: ClassVar[List[str]] = ["uuid", "jobName", "jobType", "cronExpression", "enabled", "oneTime", "system", "lastExecutionStatus", "userUuid", "objectData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduledJobDetailDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduledJobDetailDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "jobName": obj.get("jobName"),
            "jobType": obj.get("jobType"),
            "cronExpression": obj.get("cronExpression"),
            "enabled": obj.get("enabled"),
            "oneTime": obj.get("oneTime"),
            "system": obj.get("system"),
            "lastExecutionStatus": obj.get("lastExecutionStatus"),
            "userUuid": obj.get("userUuid"),
            "objectData": obj.get("objectData")
        })
        return _obj


